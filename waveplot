#!/usr/bin/env python
# Copyright 2013 Ben Ockmore

# This file is part of WavePlot.

# WavePlot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# WavePlot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with WavePlot. If not, see <http://www.gnu.org/licenses/>.

import os

# -----------------------------------------------------------------------------
#  Default Configuration - Used to Create Initial Configutation               #
# -----------------------------------------------------------------------------

configuration = {
    "submission_server":"http://localhost:19048",
    "max_submission_attempts":3
}

# -----------------------------------------------------------------------------
#  Default Paths
# -----------------------------------------------------------------------------

# These will be search in order to find the configuration file
default_paths = {
    "linux2":[
        os.path.expanduser(u"~/.config/waveplot/config.json"),
        os.path.expanduser(u"~/.local/share/waveplot.db")
        
    ],
    "win32":[
        os.path.join(unicode(os.environ.get('APPDATA','')),'waveplot\\config.json'),
        os.path.join(unicode(os.environ.get('APPDATA','')),'waveplot\\waveplot.db')
    ]
}


import subprocess
import zlib
import base64
import requests
import mutagen

import sys
import time
import datetime
import json
import sqlite3 as db
import re
import uuid
import Queue
from multiprocessing import Process, JoinableQueue 

VERSION = u"CITRUS"

from ctypes import *

class File(Structure):
    _fields_ = [("path", c_char_p)]
    # Other fields are meaningless to Python (libav stuff)

class Info(Structure):
     _fields_ = [("duration_secs", c_uint32),
                 ("num_channels", c_uint8),
                 ("bit_depth", c_uint16),
                 ("bit_rate", c_uint32),
                 ("sample_rate", c_uint32),
                 ("file_format", c_char_p)]

class AudioSamples(Structure):
     _fields_ = [("samples", POINTER(POINTER(c_float))),
                 ("length", c_size_t)]

class DR(Structure):
     _fields_ = [("channel_peak", POINTER(POINTER(c_float))),
                 ("channel_rms", POINTER(POINTER(c_float))),
                 ("length", c_size_t),
                 ("rating", c_float),
                 ("capacity", c_size_t),
                 ("processed_samples", c_size_t)]

class WavePlot(Structure):
     _fields_ = [("values", POINTER(c_float)),
                 ("length", c_size_t),
                 ("capacity", c_size_t)]

def scan_file(filename):
    lib = cdll.LoadLibrary("libwaveplot.so.1.0")

    lib.init()

    lib.alloc_file.restype = POINTER(File)
    lib.alloc_info.restype = POINTER(Info)
    lib.alloc_audio_samples.restype = POINTER(AudioSamples)
    lib.alloc_waveplot.restype = POINTER(WavePlot)
    lib.alloc_dr.restype = POINTER(DR)
    
    f = lib.alloc_file()
    i = lib.alloc_info()
    w = lib.alloc_waveplot()
    d = lib.alloc_dr()

    filename = filename.encode("utf-8")
    lib.load_file(filename,f)
    lib.get_info(i,f)

    lib.init_dr(d,i)

    a = lib.alloc_audio_samples()

    while lib.get_samples(a,f,i) != 0:
        lib.update_waveplot(w,a,i)
        lib.update_dr(d,a,i)

    lib.finish_waveplot(w)
    lib.finish_dr(d,i)
    
    waveplot = w.contents
    dr = d.contents
    info = i.contents

    image_data = bytes(bytearray([int(255.0*waveplot.values[x]) for x in range(waveplot.length)]))
    
    result = {
        'dr_level': dr.rating,
        'image': image_data,
        'length': info.duration_secs,
        'source_type': info.file_format,
        'sample_rate': info.sample_rate,
        'bit_rate': info.bit_rate,
        'bit_depth': info.bit_depth,
        'num_channels': info.num_channels
    }
                 
    lib.free_dr(d)
    lib.free_waveplot(w)
    lib.free_info(i)
    lib.free_file(f)
    
    return result

def submit_data(data):
    pass

import threading
import time

class Worker(Process):
    def __init__ (self, in_queue, out_queue):
        self.in_queue = in_queue
        self.out_queue = out_queue
        Process.__init__ (self)
        self.daemon = True
    
    def run(self):
        in_queue = self.in_queue
        out_queue = self.out_queue
        while not in_queue.empty():
            filename = in_queue.get()
            print(filename)
            data = scan_file(filename)
            out_queue.put((filename, data))
            in_queue.task_done()
        
def first_time_config():
    import sys
    
    conf = configuration
    
    print("Thank you for using this application, the WavePlot Scanner. You'll need to perform a few quick steps before first use.")
    print("If you haven't already, visit http://waveplot.net and register. An \"editor key\" will be emailed to you.")
    
    conf['editor_key'] = raw_input("Please paste your editor key below:\n>>> ")
    
    conf['configuration_path'], conf['database_path'] = [os.path.abspath(p) for p in default_paths.get(sys.platform, ['config.json','waveplot.db'])]
        
    print("Thank you. The following configuration will be used:\n")
    
    for k,v in conf.items():
        print('"{}": "{}"'.format(k,v))
        
    print('')

    try:
        os.makedirs(os.path.dirname(conf['configuration_path']))
        os.makedirs(os.path.dirname(conf['database_path']))
    except OSError:
        pass
        
    with open(conf['configuration_path'],"wb") as f:
        json.dump(conf,f)

def check_and_open_db():
    global db_conn
    db_conn = db.connect(data_path)
    db_conn.row_factory = db.Row

    c = db_conn.cursor()
    try:
        c.execute('SELECT file_path, waveplot_id, version, date FROM scanned_files LIMIT 1')
    except db.OperationalError:
        # Drop the table, create new one.
        c.execute("DROP TABLE IF EXISTS scanned_files")
        c.execute("CREATE TABLE scanned_files (file_path TEXT PRIMARY KEY, waveplot_id TEXT, version TEXT, date INTEGER)")
        db_conn.commit()
  
def upload_waveplot_data(data):
    # Append non-wp specific values
    data['editor'] = configuration['editor_key']
    data['version'] = VERSION
    
    # Encode image
    data['image'] = base64.b64encode(zlib.compress(data['image']))
    
    url = configuration['submission_server'] + '/json/waveplot'
    
    attempts = 0
    while attempts < configuration['max_submission_attempts']:
        try:
            r = requests.post(url, data = data)
        except requests.ConnectionError:
            attempts += 1
            time.sleep(0.5)
        else:
            print(r.json())
            return r.json()

    return None
    

recognised_ext = [
    u".flac",
    u".mp3",
    u".ogg"
]

# --- Main Script --- #
if __name__ == "__main__":

    abspath = os.path.abspath
    join = os.path.join
    splitext = os.path.splitext
    exists = os.path.exists

    conf_path, db_path = [abspath(p) for p in default_paths.get(sys.platform, ['config.json','waveplot.db'])]
    if not exists(conf_path):
        first_time_config()
    else:
        with open(conf_path, "rb") as f:
            configuration = json.load(f)
    
    # Construct queue
    file_queue = JoinableQueue()
    upload_queue = JoinableQueue()
    for directory, directories, filenames in os.walk(u"."):
        path_gen = (abspath(join(directory, f)) for f in filenames)
        for path in path_gen:
            if splitext(path)[1] in recognised_ext:
                file_queue.put(path)
   
    print("{} items to process...".format(file_queue.qsize()))
   
    # Spawn eight threads to process queues (assume that processor won't have more than 8 cores)
    subprocesses = []
    for i in range(8):
        subprocesses.append(Worker(file_queue, upload_queue))
        subprocesses[-1].start()
       
    while not file_queue.empty():
        # Wait for 10 seconds or until something pops up on the upload queue
        try:
            data = upload_queue.get(True, 10)
        except Queue.Empty:
            pass
        else:
            upload_waveplot_data(data[1])
        
    # Wait for file_queue to be completely used up, if it isn't already
    file_queue.join()
    
    # Process the remaining items on upload_queue
    
    while True:
        # Keep getting items until the queue tells us it's empty.
        try:
            data = upload_queue.get_nowait()
        except Queue.Empty:
            break
        else:
            upload_waveplot_data(data[1])
"""
    config_path = None
    data_path = None

    config = {}

    db_conn = None

    dir_has_audio = False

    imager_exe = u"WavePlotImager"
    if sys.platform == "win32":
        imager_exe += u".exe"

    set_waveplot_paths()
    check_and_read_config()
    check_and_open_db()

    auto_update()

    find_imager()

    if imager_exe is None:
        sys.exit(1)

    safeprint(u"Using executable: {}".format(imager_exe))

    imager_exe = imager_exe.encode("utf_8")
    VERSION = VERSION.encode("utf_8")

    safeprint(u"\nFinding files to scan...")

    c = db_conn.cursor()

    for directory, directories, filenames in os.walk(u"."):

        if dir_has_audio:
            safeprint("")

        safeprint(directory)
        dir_has_audio = False

        for filename in filenames:

            in_path = os.path.realpath(os.path.join(directory, filename))

            audio = mutagen.File(os.path.join(directory, filename), easy = True)

            if audio:
                recording_id = audio.get("musicbrainz_trackid", [None, ])[0]
                release_id = audio.get("musicbrainz_albumid", [None, ])[0]
                track_num = audio.get("tracknumber", [None, ])[0]
                disc_num = audio.get("discnumber", [None, ])[0]

                if (recording_id is not None) and (release_id is not None) and (track_num is not None) and (disc_num is not None):
                    dir_has_audio = True

                    track_num = track_num.split(u'/')[0].strip()
                    disc_num = disc_num.split(u'/')[0].strip()

                    c.execute("SELECT * FROM scanned_files WHERE file_path=?", (in_path,))
                    result = c.fetchone()

                    if result is not None:
                        if (result['version'] == VERSION) and (result['waveplot_id'] is not None):
                            sys.stdout.write(u"#".encode(sys.stdout.encoding, "replace"))
                            sys.stdout.flush()
                            continue

                    safeprint(u"File: {}".format(in_path))

                    try:
                        output = subprocess.check_output([imager_exe, in_path.encode('utf_8'), VERSION])
                    except subprocess.CalledProcessError:
                        safeprint("WavePlotImager Error - Skipped File.")
                    else:
                        result = submit_imager_output(output)
                        
                        print result

                        c.execute("INSERT OR REPLACE INTO scanned_files VALUES (?,?,?,?)", (in_path, result, VERSION, datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M")))
                        db_conn.commit()

    db_conn.close()"""
